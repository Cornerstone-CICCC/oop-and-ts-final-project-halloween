---

---

<div class="flex gap-4">
  <div class="mb-4">
    <form id="add-task-form">
      <button type="submit">Add Task</button>
    </form>
  </div>
  <div id="task-list" class="flex gap-4">
    <!-- タスクリストがここに表示されます -->
  </div>
</div>

<script>
  import { TaskContext } from "../lib/taskStore";
  import Sortable from "sortablejs";

  // タスクコンテキスト
  const taskContext = new TaskContext();

  const form = document.getElementById("add-task-form");
  if (!form) throw new Error("add-task-form not found");

  form.addEventListener("submit", (e) => {
    e.preventDefault();
    console.log("submit");
    const title = "Hoge";
    const description = "XX";
    taskContext.addTask(title, description, "todo");
  });

  declare global {
    interface Window {
      simpleAlert: () => void;
    }
  }

  window.simpleAlert = () => {
    alert("simpleAlert");
  };

  function renderTasks() {
    const columns = taskContext.getColumns().get();
    const taskList = document.getElementById("task-list");
    if (!taskList) throw new Error("task-list not found");
    let ids: string[] = [];
    taskList.innerHTML = columns
      .map((column) => {
        ids.push(`column-${column.label}`);
        return `
            <div id="column-${column.label}" class="border border-gray-300 rounded-xl p-4 bg-[#E1E1E1] w-[400px]">
                <div class="flex justify-between mb-4">
                    <h3 class="text-lg font-inter">${column.label}</h3>
                    <div class="flex gap-2">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" onclick="window.simpleAlert()">
                            <path fill="currentColor" d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/>
                        </svg>
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" class="cursor-pointer">
                            <path fill="currentColor" d="M16 12a2 2 0 0 1 2-2a2 2 0 0 1 2 2a2 2 0 0 1-2 2a2 2 0 0 1-2-2m-6 0a2 2 0 0 1 2-2a2 2 0 0 1 2 2a2 2 0 0 1-2 2a2 2 0 0 1-2-2m-6 0a2 2 0 0 1 2-2a2 2 0 0 1 2 2a2 2 0 0 1-2 2a2 2 0 0 1-2-2"/>
                        </svg>
                    </div>
                </div>
              <div class="flex flex-col gap-2 sortable-container min-h-12" data-column-label="${column.label}">
                ${column.tasks
                  .map(
                    (task) => `
                  <div class="border border-gray-300 rounded-xl p-2 bg-[#ffffff] p-4 hover:translate-y-[-4px] hover:shadow-lg transition-transform duration-300" data-task-id="${task.id}">
                    <div class="flex justify-between">
                      <h4 class="text-2xl ">${task.title}</h4>
                      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" class="cursor-pointer">
                        <path fill="currentColor" d="M16 12a2 2 0 0 1 2-2a2 2 0 0 1 2 2a2 2 0 0 1-2 2a2 2 0 0 1-2-2m-6 0a2 2 0 0 1 2-2a2 2 0 0 1 2 2a2 2 0 0 1-2 2a2 2 0 0 1-2-2m-6 0a2 2 0 0 1 2-2a2 2 0 0 1 2 2a2 2 0 0 1-2 2a2 2 0 0 1-2-2"/>
                      </svg>
                    </div>
                    <p class="text-sm py-2">${task.description}</p>
                  </div>
                `
                  )
                  .join("")}
              </div>
            </div>
          `;
      })
      .join("");
    ids?.forEach((id) => {
      const element = document
        .getElementById(id)
        ?.querySelector(".sortable-container");
      if (!element) return;
      new Sortable(element as HTMLElement, {
        group: "shared",
        animation: 150,
        emptyInsertThreshold: 20,
        onEnd: (event) => {
          const taskId = event.item.getAttribute("data-task-id");
          const fromColumnLabel =
            event.from.getAttribute("data-column-label") ?? "";
          const toColumnLabel =
            event.to.getAttribute("data-column-label") ?? "";
          const newIndex = event.newIndex ?? 0;
          taskContext.moveTask(
            Number(taskId),
            fromColumnLabel,
            toColumnLabel,
            newIndex
          );
        },
      });
    });
  }

  // 初期レンダリング
  renderTasks();

  // storeの変更を監視
  taskContext.getColumns().subscribe(() => {
    renderTasks();
  });
</script>

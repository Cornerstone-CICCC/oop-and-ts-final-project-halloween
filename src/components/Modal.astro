<div
  class="modal-wrapper items-center justify-center min-h-screen hidden opacity-0 transition-opacity duration-300 ease-in-out"
>
  <div
    class="modal flex relative w-2/3 p-20 justify-between rounded-3xl border border-black border-solid mx-auto my-[15%] bg-white transform scale-95 transition-transform duration-300 ease-in-out"
  >
    <button
      class="close absolute top-4 left-5 bg-transparent border-none text-black text-3xl cursor-pointer"
      >&times;</button
    >

    <div class="description">
      <h1
        class="text-3xl mb-8 focus:outline-none px-2 py-0.5 rounded-md focus:bg-[#F0F0F0]"
        id="title"
        contenteditable="true"
      >
        titless
      </h1>
      <p
        class="focus:outline-none px-2 py-0.5 rounded-md focus:bg-[#F0F0F0]"
        id="description"
        contenteditable="true"
      >
        text
      </p>
      <!--svg-->
      <img src="/asignee/pumpkin-icon.svg" alt="Edit" class="pr-2 w-6 h-6" />
    </div>
    <div class="menu">
      <p class="pb-4 flex">
        <img src="../../public/Edit.svg" alt="Edit" class="pr-2 w-6 h-6" />
        Edit
      </p>
      <div class="status flex items-center pb-4">
        <img src="../../public/Flag.svg" alt="flag" class="h-6 pr-2 w-6" />
        <p class="pr-4">Status:</p>
        <select
          id="taskStatus"
          name="taskStatus"
          class="p-1 rounded focus:outline-none"
        >
        </select>
      </div>
      <p class="flex items-center">
        <button id="deleteButton" class="flex items-center">
          <span class="pr-2">
            <img src="../../public/delete.svg" alt="delete" class="w-6 h-6" />
          </span>
          Delete
        </button>
      </p>
      <img src="../../public/pumpkin.png" alt="pumpkin" class="w-48 pt-12" />
    </div>
  </div>
</div>
<style>
  .modal-wrapper {
    position: fixed;
    background-color: rgba(0, 0, 0, 0.5);
    width: 100%;
    height: 100%;
    z-index: 50;
    overflow: auto;
    left: 0;
    top: 0;
  }
</style>

<script>
  import { TaskContext } from "../lib/taskStore";
  import { TaskModalContext } from "../lib/taskModaStore";
  const taskModalContext = TaskModalContext.getInstance();
  const taskContext = TaskContext.getInstance();

  function updateModal() {
    const modalWrapper = document.querySelector(".modal-wrapper");
    if (!modalWrapper) return;
    const isOpen = taskModalContext.getIsOpen();
    //modalWrapper.classList.toggle("hidden", !isOpen);

    if (isOpen) {
      modalWrapper.classList.remove("hidden");
      //@ts-ignore force reflow
      void modalWrapper.offsetWidth;
      modalWrapper.classList.add("opacity-100");
      modalWrapper.classList.add("scale-100");
      modalWrapper.setAttribute(
        "column-label",
        taskModalContext.getColumnLabel()
      );
      modalWrapper.setAttribute("task-id", taskModalContext.getTaskId());
      document.body.style.overflow = "hidden";
      addCloseListeners();
      setUpModalContent();
    } else {
      modalWrapper.classList.remove("opacity-100");
      modalWrapper.classList.remove("scale-100");
      setTimeout(() => {
        modalWrapper.classList.add("hidden");
      }, 300);

      document.body.style.overflow = "";
      removeCloseListeners();
    }
  }

  function setUpModalContent() {
    const title = document.getElementById("title");
    const description = document.getElementById("description");
    const task = taskContext.getTask(
      parseInt(taskModalContext.getTaskId()),
      taskModalContext.getColumnLabel()
    );
    if (title) title.innerHTML = task?.title || "";
    if (description) description.innerHTML = task?.description || "";

    setupStatusSelect();

    // Event listeners
    title?.addEventListener("blur", () => {
      taskContext.editTask(
        taskModalContext.getColumnLabel(),
        parseInt(taskModalContext.getTaskId()),
        title?.innerHTML || "",
        description?.innerHTML || ""
      );
    });

    title?.addEventListener("keydown", (event) => {
      if (event.key === "Enter") {
        event.preventDefault();
        title.blur();
      }
    });

    description?.addEventListener("blur", () => {
      taskContext.editTask(
        taskModalContext.getColumnLabel(),
        parseInt(taskModalContext.getTaskId()),
        title?.innerHTML || "",
        description?.innerHTML || ""
      );
    });

    description?.addEventListener("keydown", (event) => {
      if (event.key === "Enter") {
        event.preventDefault();
        description.blur();
      }
    });

    // Delete button
    const deleteButton = document.getElementById("deleteButton");
    if (deleteButton) {
      deleteButton.addEventListener("click", () => {
        taskContext.deleteTask(
          parseInt(taskModalContext.getTaskId()),
          taskModalContext.getColumnLabel()
        );
        closeModal();
      });
    }
  }

  function setupStatusSelect() {
    // Set status
    // options をクリア
    const statusSelect = document.getElementById("taskStatus");
    if (statusSelect) statusSelect.innerHTML = "";

    const statusOptions = taskContext.getLabels();
    // current labelを取り除いて先頭に追加
    statusOptions.splice(
      statusOptions.indexOf(taskModalContext.getColumnLabel()),
      1
    );
    statusOptions.unshift(taskModalContext.getColumnLabel());
    if (statusSelect) {
      // create options
      statusOptions.forEach((option) => {
        const optionEl = document.createElement("option");
        optionEl.value = option;
        optionEl.textContent = option;
        statusSelect.appendChild(optionEl);
      });
    }

    statusSelect?.addEventListener("change", (event) => {
      const target = event.target as HTMLSelectElement;
      if (target.value === taskModalContext.getColumnLabel()) return;

      taskContext.updateTaskLabel(
        parseInt(taskModalContext.getTaskId()),
        taskModalContext.getColumnLabel(),
        target.value
      );
    });
  }

  function closeModal() {
    taskModalContext.closeModal();
  }

  function addCloseListeners() {
    const modalWrapper = document.querySelector(".modal-wrapper");
    const closeButton = document.querySelector(".close");

    if (modalWrapper) {
      modalWrapper.addEventListener("click", handleOutsideClick);
    }
    if (closeButton) {
      closeButton.addEventListener("click", closeModal);
    }
  }

  function removeCloseListeners() {
    const modalWrapper = document.querySelector(".modal-wrapper");
    const closeButton = document.querySelector(".close");

    if (modalWrapper) {
      modalWrapper.removeEventListener("click", handleOutsideClick);
    }
    if (closeButton) {
      closeButton.removeEventListener("click", closeModal);
    }
  }

  function handleOutsideClick(event: Event) {
    if (
      event.target &&
      (event.target as HTMLElement).classList.contains("modal-wrapper")
    ) {
      closeModal();
    }
  }

  taskModalContext.addListener(updateModal);
</script>
